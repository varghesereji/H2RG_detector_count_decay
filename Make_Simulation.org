#+TITLE: Making the simulation

* Functions to define
** Interpolate for p for any count
- Call the files of p and counts
- Interpolate the values to find p with arbitrary counts
** Up the ramp
- Differential Equation: \frac{dc_t}{dt} = R
- R: The rate of change of count per unit time while the detector is exposed.
- Solution: c_t = R*dt+ c_{t-dt}
** Decay
- Function of decay: a(e^{-bt/20}-1)
- t is in the unit of per readout. (How to make it in terms of seconds?)
- The decay function is in terms of \frac{c_t-c_{10}}{10} * 100
- c_t = (c_10/100)*(a(e^{-bt/20}-1)) + c_10
- This t is starting from 10th frame, where the shutter is closing.


* Before closing
** Up the Ramp
** Decay
* After closing
** Decay





---------------------------------------------------------------------------------------------------------

* Things to execute


** Generate functions

**** DONE [[Functions to define]]

** Code 1: Create pure up-the-ramp before t_max and decay after t_max
[[file:1_Basic_code_for_simulation.py]]
*** Beginning: Pure raise and decay only.
**** DONE Make up-the-ramp only without decay
**** DONE Make decay at the end of up the ramp

** Code 2: up-the-ramp readouts with decay in each instant
[[file:2_each_point_decay.py]]

*** Decay with count increase in each step until t_max
**** DONE Find up the ramp in each step. Initial value: c_0, updated value:c_t [[Up the ramp]]
**** DONE Find value of p corresponding to c_0 using [[Interpolate for p for any count]]
**** DONE Find the value of exponential function using the p that found: e_t. This will be negative. From [[Decay]]
**** DONE the new count will be c_t+e_t
**** DONE Repeat these with updated c_0, c_0 = c_t+e_t
**** DONE Continue until reach t_max

*** Decay after t_max Code 2

**** DONE Find value of p corresponding to the count at the time of shutter close.
**** DONE Create an array of time in the range (t_max,30/dt,dt)
**** DONE Get the exponential function array from [[Decay]]


** Code 3: Add up the decays in all the previous instant
[[file:3_add_up_decays.py][file 3: Adding all decays]]

*** Up the ramp with adding decay all previous step in each instant

**** DONE Make the decay with the count in the current instant, t
**** DONE Previous instants are (t-a)
**** DONE Consider decay of t-1 th instant.
**** DONE Take value of decay with instant 1 of t-1 th curve.
**** DONE repeat until first curve. Add these to an array
**** DONE Take sum of all and add to the final count.
**** DONE Repeat this to each instant.




*** Decay after t_max (Code 3)
Same as [[Decay after t_max Code 2]].


** Code 4 and 5: make all functions using [[Code 2: up-the-ramp readouts with decay in each instant]] and 
[[Code 3: Add up the decays in all the previous instant]].

**** DONE

** Code 6: Compare both the simulations
[[6_compare_simulations.py]]

**** DONE Result: [[compare_simulation.png]].

** Code 7: Compare simulations with actual data

**** TODO Call data
**** TODO Take the count in the 10th frame and divide it by 10 and use it as rate
**** TODO Feed it to functions for simulation
**** TODO Plot all together
